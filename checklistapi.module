<?php

/**
 * @file
 * An API for creating fillable, persistent checklists.
 *
 * Provides an interface for creating checklists that track progress with
 * completion times and users.
 */

/**
 * Link should always be shown.
 */
define('CHECKLISTAPI_LINK_CONTEXT_ANY', 1);

/**
 * Link should only be shown if the item it belongs to has been checked off.
 */
define('CHECKLISTAPI_LINK_CONTEXT_ITEM_CHECKED', 2);

/**
 * Link should only be shown if the item it belongs to has not been checked off.
 */
define('CHECKLISTAPI_LINK_CONTEXT_ITEM_UNCHECKED', 3);

/**
 * Access callback: Checks the current user's access to a checklist.
 *
 * @param string $id
 *   The checklist ID.
 *
 * @return bool
 *   Returns TRUE if the current has access to the specified checklist, or FALSE
 *   if not.
 */
function checklistapi_checklist_access($id) {
  return user_access('edit any checklistapi checklist') || user_access('edit ' . $id . ' checklistapi checklist');
}

/**
 * Loads a checklist object.
 *
 * @param string $id
 *   The checklist ID.
 *
 * @return ChecklistapiChecklist|false
 *   A fully-loaded checklist object, or FALSE if the checklist is not found.
 */
function checklistapi_checklist_load($id) {
  $definition = checklistapi_get_checklist_info($id);
  return ($definition) ? new ChecklistapiChecklist($definition) : FALSE;
}

/**
 * Gets checklist definitions.
 *
 * @param string $id
 *   (optional) A checklist ID.
 *
 * @return array|false
 *   The definition of the specified checklist, or FALSE if no such checklist
 *   exists, or an array of all checklist definitions if none is specified.
 */
function checklistapi_get_checklist_info($id = NULL) {
  $checklists = &drupal_static(__FUNCTION__);
  if (!isset($checklists)) {
    $checklists = module_invoke_all('checklistapi_checklist_info');
    $checklists = checklistapi_sort_array($checklists);
    drupal_alter('checklistapi_checklist_info', $checklists);
    $checklists = checklistapi_sort_array($checklists);
    foreach ($checklists as $key => $value) {
      $checklists[$key] = array('#id' => $key) + $checklists[$key];
    }
  }
  if (!empty($id)) {
    return (!empty($checklists[$id])) ? $checklists[$id] : FALSE;
  }
  return $checklists;
}

/**
 * Implements hook_help().
 */
function checklistapi_help($path, $arg) {
  $checklists = checklistapi_get_checklist_info();
  foreach ($checklists as $checklist) {
    if ($checklist['#path'] == $path && !empty($checklist['#help'])) {
      return $checklist['#help'];
    }
  }
}

/**
 * Implements hook_menu().
 */
function checklistapi_menu() {
  $items = array();
  $items['admin/reports/checklistapi'] = array(
    'title' => 'Checklists',
    'page callback' => 'checklistapi_report_form',
    'access arguments' => array('access checklistapi checklists report'),
    'file' => 'checklistapi.admin.inc',
  );

  foreach (checklistapi_get_checklist_info() as $checklist_id => $checklist) {
    if (!empty($checklist['#path']) && !empty($checklist['#title'])) {
      $path = $checklist['#path'];
      $items[$path] = array(
        'title' => $checklist['#title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('checklistapi_checklist_form', $checklist_id),
        'access callback' => 'checklistapi_checklist_access',
        'access arguments' => array($checklist_id),
        'file' => 'checklistapi.pages.inc',
      );
      if (!empty($checklist['#description'])) {
        $items[$path]['description'] = $checklist['#description'];
      }
      if (!empty($checklist['#menu_name'])) {
        $items[$path]['menu_name'] = $checklist['#menu_name'];
      }

      $items[$path . '/clear'] = array(
        'title' => 'Clear',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('checklistapi_checklist_clear_confirm', $checklist_id),
        'access callback' => 'checklistapi_checklist_access',
        'access arguments' => array($checklist_id),
        'file' => 'checklistapi.pages.inc',
      );
    }
  }
  return $items;
}

/**
 * Implements hook_permission().
 */
function checklistapi_permission() {
  $perms = array();
  $perms['access checklistapi checklists report'] = array(
    'title' => t(
      'Access !name report',
      array('!name' => (user_access('access checklistapi checklists report')) ? l('Checklists', 'admin/reports/checklistapi') : drupal_placeholder('Checklists'))
    ),
  );

  $perms['edit any checklistapi checklist'] = array(
    'title' => t('Edit any checklist'),
  );

  foreach (checklistapi_get_checklist_info() as $id => $checklist) {
    if (!empty($id)) {
      $permission = 'edit ' . $id . ' checklistapi checklist';
      $perms[$permission] = array(
        'title' => t(
          'Edit the !name checklist',
          array('!name' => (user_access($permission)) ? l($checklist['#title'], $checklist['#path']) : drupal_placeholder($checklist['#title']))
        ),
      );
    }
  }
  return $perms;
}

/**
 * Recursively sorts array elements by #weight.
 *
 * @param array $array
 *   A nested array of elements and properties, such as the checklist
 *   definitions returned by hook_checklistapi_checklist_info().
 *
 * @return array
 *   The input array sorted recursively by #weight.
 *
 * @see checklistapi_get_checklist_info()
 */
function checklistapi_sort_array(array $array) {
  $child_keys = element_children($array);
  if (count($child_keys)) {
    $incrementer = 0;
    $children = array();
    foreach ($child_keys as $key) {
      // Move child to a temporary array for sorting.
      $children[$key] = $array[$key];
      unset($array[$key]);
      // Supply a default weight if missing or invalid.
      if (empty($children[$key]['#weight']) || !is_numeric($children[$key]['#weight'])) {
        $children[$key]['#weight'] = 0;
      }
      // Increase each weight incrementally to preserve the original order when
      // not overridden. This accounts for undefined behavior in PHP's uasort()
      // function when its comparison callback finds two values equal.
      $children[$key]['#weight'] += ($incrementer++ / 1000);
      // Descend into child.
      $children[$key] = checklistapi_sort_array($children[$key]);
    }
    // Sort by weight.
    uasort($children, 'element_sort');
    // Remove incremental weight hack.
    foreach ($children as $key => $child) {
      $children[$key]['#weight'] = floor($children[$key]['#weight']);
    }
    // Put children back in the main array.
    $array += $children;
  }
  return $array;
}
