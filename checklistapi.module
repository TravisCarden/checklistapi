<?php

/**
 * @file
 * An API for creating fillable, persistent checklists.
 *
 * Provides an interface for creating checklists that track progress with
 * completion times and users.
 */

/**
 * Link should always be shown.
 */
define('CHECKLISTAPI_LINK_CONTEXT_ANY', 1);

/**
 * Link should only be shown if the item it belongs to has been checked off.
 */
define('CHECKLISTAPI_LINK_CONTEXT_ITEM_CHECKED', 2);

/**
 * Link should only be shown if the item it belongs to has not been checked off.
 */
define('CHECKLISTAPI_LINK_CONTEXT_ITEM_UNCHECKED', 3);

/**
 * Access callback: Checks access for a checklist.
 *
 * @param string $checklist_id
 *   The unique ID of the checklist to be displayed, which is its array key from
 *   hook_checklistapi_checklist_info().
 */
function checklistapi_checklist_access($checklist_id) {
  return user_access('edit any checklistapi checklist') || user_access('edit ' . $checklist_id . ' checklistapi checklist');
}

/**
 * Get all defined checklists.
 *
 * @return array
 *   An associative array representing the defined checklists.
 */
function checklistapi_get_checklist_info() {
  $checklists = &drupal_static(__FUNCTION__);
  if (!isset($checklists)) {
    $checklists = module_invoke_all('checklistapi_checklist_info');
    // checklistapi_prepare_checklists($checklists);
    drupal_alter('checklistapi_checklist_info', $checklists);
    // checklistapi_prepare_checklists($checklists);
  }
  return $checklists;
}

/**
 * Implements hook_help().
 */
function checklistapi_help($path, $arg) {
  $checklists = checklistapi_get_checklist_info();
  foreach ($checklists as $checklist) {
    if ($checklist['#path'] == $path && !empty($checklist['#help'])) {
      return $checklist['#help'];
    }
  }
}

/**
 * Implements hook_menu().
 */
function checklistapi_menu() {
  $items = array();
  foreach (checklistapi_get_checklist_info() as $checklist_id => $checklist) {
    if (!empty($checklist['#path']) && !empty($checklist['#title'])) {
      $path = $checklist['#path'];
      $items[$path] = array(
        'title' => $checklist['#title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('checklistapi_form', $checklist_id),
        'access callback' => 'checklistapi_checklist_access',
        'access arguments' => array($checklist_id),
        'file' => 'checklistapi.pages.inc',
      );
      if (!empty($checklist['#description'])) {
        $items[$path]['#description'] = $checklist['#description'];
      }
      if (!empty($checklist['#menu_name'])) {
        $items[$path]['#menu_name'] = $checklist['#menu_name'];
      }
    }
  }
  return $items;
}

/**
 * Implements hook_permission().
 */
function checklistapi_permission() {
  $perms = array();
  $perms['edit any checklistapi checklist'] = array(
    'title' => t('Edit any checklist'),
  );
  foreach (checklistapi_get_checklist_info() as $key => $checklist) {
    if (!empty($key)) {
      $permission = 'edit ' . $key . ' checklistapi checklist';
      // Only link to the checklist if the active user has access to it.
      $checklist_name_replacement = user_access($permission) ? l($checklist['#title'], $checklist['#path']) : drupal_placeholder($checklist['#title']);
      $perms[$permission] = array(
        'title' => t('Edit the !checklist checklist', array('!checklist' => $checklist_name_replacement)),
      );
    }
  }
  return $perms;
}

/**
 * Sorts checklist components by weight.
 *
 * @param array $checklists
 *   A multidimensional array of checklist definitions returned from
 *   hook_checklistapi_checklist_info().
 *
 * @see checklistapi_get_checklist_info()
 */
function checklistapi_prepare_checklists(&$checklists) {
  if (!empty($checklists)) {
    // Sort checklists by weight.
    uasort($checklists, 'element_sort');
    // Loop through checklists.
    foreach ($checklists as $checklist_id => $checklist) {
      if (!empty($checklist['groups']) && is_array($checklist['groups'])) {
        // Sort groups by weight.
        uasort($checklists[$checklist_id]['groups'], 'element_sort');
        // Loop through groups.
        foreach ($checklist['groups'] as $group_id => $group) {
          if (!empty($group['items']) && is_array($group['items'])) {
            // Sort checklist items by weight.
            uasort($checklists[$checklist_id]['groups'][$group_id]['items'], 'element_sort');
            // Loop through checklist items.
            foreach ($group['items'] as $item_id => $item) {
              if (!empty($item['links']) && is_array($item['links'])) {
                // Sort links by weight.
                uasort($checklists[$checklist_id]['groups'][$group_id]['items'][$item_id]['links'], 'element_sort');
              }
            }
          }
        }
      }
    }
  }
}
